# Automation to send daily use notification, log daily use to file and to accumulate total cost
- id: daily_energy_use_message
  alias: 'Daily Energy Use Message'
  trigger:
    platform: time
    at: '23:59:50'
  action:
  - service: notify.mobile_app_iphone_sf
    data_template:
      title: 'צריכה ועלות חשמל היום!'
      message: "\nצריכה: {{ states('total_cost_energy_daily') }} kWh. \nעלות: {{ states('sensor.total_cost_energy_today') }} שח."
      data:
        push:
          sound: "SIMToolkitGeneralBeep.caf"      

#### Store #####
### Monthly ###
- alias: 'Store Monthly Energy On Input Entity'
  id: store_monthly_energy_on_input_entity
  description: Store Monthly Energy On Input Entity
  trigger:
    platform: time
    at: '23:59:50'
  action:
  - service: input_number.set_value
    data:
      value: "{{ [ states('sensor.total_cost_energy_daily') | float(0) + states('input_number.monthly_power_energy') | float(0) ] | max }}"
    target:
      entity_id: input_number.monthly_power_energy
  mode: single

- alias: 'Store Monthly Cost On Input Entity'
  id: store_monthly_cost_on_input_entity
  description: Store Monthly Cost On Input Entity
  trigger:
    platform: time
    at: '23:59:50'
  action:
  - service: input_number.set_value
    data:
      value: "{{ [ states('sensor.total_cost_energy_today') | float(0) + states('input_number.monthly_cost_energy') | float(0) ] | max }}"
    target:
      entity_id: input_number.monthly_cost_energy
  mode: single

### Yearly ###
- alias: 'Store Yearly Energy On Input Entity'
  id: store_yearly_energy_on_input_entity
  description: Store Yearly Energy On Input Entity
  trigger:
    platform: time
    at: '23:59:50'
  action:
  - service: input_number.set_value
    data:
      value: "{{ [ states('sensor.total_cost_energy_daily') | float(0) + states('input_number.yearly_power_energy') | float(0) ] | max }}"
    target:
      entity_id: input_number.yearly_power_energy
  mode: single

- alias: 'Store Yearly Cost On Input Entity'
  id: store_yearly_cost_on_input_entity
  description: Store Yearly Cost On Input Entity
  trigger:
    platform: time
    at: '23:59:50'
  action:
  - service: input_number.set_value
    data:
      value: "{{ [ states('sensor.total_cost_energy_today') | float(0) + states('input_number.yearly_cost_energy') | float(0) ] | max }}"
    target:
      entity_id: input_number.yearly_cost_energy
  mode: single


#### Reset #####
### Monthly ###
- alias: 'Reset Monthly Energy On Input Entity'
  id: reset_monthly_energy_on_input_entity
  description: Reset Monthly Energy On Input Entity
  trigger:
    platform: time
    at: '23:59:00'
  condition:
    condition: template
    value_template: '{{ now().strftime("%d") == "01" }}'  
#    value_template: '{{ now().strftime("%m-%d") == "01-01" }}'          
  action:
  - service: input_number.set_value
    data:
      value: 0.0
    target:
      entity_id: input_number.monthly_power_energy
  mode: single

- alias: 'Reset Monthly Cost On Input Entity'
  id: reset_monthly_cost_on_input_entity
  description: Reset Monthly Cost On Input Entity
  trigger:
    platform: time
    at: '23:59:00'
  condition:
    condition: template
    value_template: '{{ now().strftime("%d") == "01" }}'  
#    value_template: '{{ now().strftime("%m-%d") == "01-01" }}'          
  action:
  - service: input_number.set_value
    data:
      value: 0.0
    target:
      entity_id: input_number.monthly_cost_energy
  mode: single

### Yearly ###
- alias: 'Reset Yearly Energy On Input Entity'
  id: reset_yearly_energy_on_input_entity
  description: Reset Yearly Energy On Input Entity
  trigger:
    platform: time
    at: '23:59:00'
  condition:
    condition: template
#    value_template: '{{ now().strftime("%d") == "01" }}'  
    value_template: '{{ now().strftime("%m-%d") == "01-01" }}'          
  action:
  - service: input_number.set_value
    data:
      value: 0.0
    target:
      entity_id: input_number.yearly_power_energy
  mode: single

- alias: 'Reset Yearly Cost On Input Entity'
  id: reset_yearly_cost_on_input_entity
  description: Reset Yearly Cost On Input Entity
  trigger:
    platform: time
    at: '23:59:00'
  condition:
    condition: template
#    value_template: '{{ now().strftime("%d") == "01" }}'  
    value_template: '{{ now().strftime("%m-%d") == "01-01" }}'      
  action:
  - service: input_number.set_value
    data:
      value: 0.0
    target:
      entity_id: input_number.yearly_cost_energy
  mode: single












#  - service: notify.energy_log
#    data_template:
#      message: "{{ states('sensor.date') }},{{ states('sensor.energy_t31_light_and_power_day') }},{{ states('sensor.energy_t31_light_and_power_night') }},{{ states('sensor.energy_t31_light_and_power_total') }},{{ states('sensor.energy_t41_heating_day') }},{{ states('sensor.energy_t41_heating_night') }},{{ states('sensor.energy_t41_heating_total') }},{{ states('sensor.total_energy_day') }},{{ states('sensor.total_energy_night') }},{{ states('sensor.total_energy') }},{{ state_attr('sensor.power_stats','min_value') }},{{ state_attr('sensor.power_stats','max_value') }},{{ states('sensor.power_stats') }},{{ states('sensor.total_cost_today') }}"    
      
